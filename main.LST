C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\Keil_v4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include"Key.h"
   2          #include"LED.h"
   3          #include"EEPROM.h"
   4          
   5          //默认的模式为发射强度设置模式
   6          unsigned char nState = POWER_SET_STATE;
   7          //默认事件0
   8          unsigned char nEvent = 0;
   9          
  10          unsigned char nPowerLevel = 1;  //发射强度等级
  11          unsigned char nFreqLevel  = 1;  //发射频率等级
  12          unsigned char nFreqLevelCur  = 1;  //发射频率等级
  13          unsigned char nAlarmLevel = 1;  //电击强度等级
  14          
  15          bit  bInAlarm = 0;      //进入警示档位调节提示标志位
  16          bit  bInFreq  = 0;      //进入频率调节提示标志位
  17          u16  nflagLastTime = 0; //警示或者频率标志持续的时间检测
  18          
  19          sbit Signal     = P3^5;   //定义P35口是信号发射口
  20          sbit bSigSwitch = P3^7;   //发射信号开关
  21          sbit LED2 =P2^5;             //LED2灯
  22          sbit LED3 =P2^4;             //LED3灯
  23          sbit Beep =P1^0;             //定义P10口是Beep
  24          sbit ProtectA =P3^2;     //保护监测引脚A
  25          sbit ProtectB =P3^3;     //保护监测引脚B
  26          sbit ProtectC =P3^4;     //保护监测引脚C
  27          
  28          sbit Protect1 =P1^4;     //保护监测引脚A
  29          sbit Protect2 =P1^5;     //保护监测引脚B
  30          sbit Protect3 =P4^4;     //保护监测引脚C
  31          u16  nErrorLastTime = 0;
  32                   
  33          bit  bEnable = 1;         //发射信号使能标志
  34          bit  bUserEvent = 0;      //用户事件标志位
  35          bit  bSafeProtect = 1;    //安全标志位
  36          bit  bSendCode  = 0;      //发送特征码的标志位
  37          bit  bSetCode  = 0;       //使能特征码配置标志位
  38          
  39          
  40          //发射功率对应P0指令表
  41          unsigned char code PowerCodeTb[]={0x00,0x80,0x01,0x81,0x04,0x03,0x05,0x85,
  42                                            0x08,0x88,0x10,0x90,0x11,0x91,0x14,0x8d,
  43                                                                            0x20,0xa0,0x18,0xa1,0x40,0xc0,0x25,0xc1,
  44                                                                            0x44,0xc4,0x45,0xa9,0x31,0x31,0x31,0x31};
  45          
  46          //获取EEPROM配置
  47          void LoadConfig()
  48          {
  49   1         nPowerLevel = IapReadByte(POWER_SET_ADDR);
  50   1         nFreqLevel  = IapReadByte(FREQ_SET_ADDR);
  51   1         //对数据的有效性进行判断
  52   1         if((nPowerLevel >32)||(nPowerLevel < 0))     
  53   1         {
  54   2             nPowerLevel = 1;
  55   2         }
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 2   

  56   1         if((nFreqLevel >2)||(nFreqLevel <= 0))       
  57   1         {
  58   2             nFreqLevel = 1;
  59   2         }
  60   1      }
  61          
  62          //保存EEPROM配置
  63          void SaveConfig()
  64          {
  65   1        IapEraseSector(POWER_SET_ADDR);
  66   1        IapProgramByte(POWER_SET_ADDR,nPowerLevel);
  67   1        IapProgramByte(FREQ_SET_ADDR,nFreqLevel);
  68   1      }
  69          
  70          //获取按键事件
  71          bit GetUserEvent()
  72          {
  73   1              if(0 == bUserEvent)
  74   1                 return 0;
  75   1              else
  76   1                 return 1;
  77   1      }
  78          
  79          //处理功率设置模式的事件
  80          void PowerSetHandle()
  81          {
  82   1          unsigned char nKey  = nEvent&0x0f;
  83   1              unsigned char nMask = nEvent&0xf0;
  84   1              switch(nKey)
  85   1              {
  86   2                      case KEY_AB_PRES:                  //AB组合键
  87   2                      {
  88   3                           if(KEY_LONG == nMask)       //长按
  89   3                              {
  90   4                                   printf("to Alarm \n");
  91   4                                       nState =  ALARM_SET_STATE;   //切换到电击强度设置状态
  92   4                                       bInAlarm = 0;      //关闭进入警示档位调节提示标志位
  93   4                                       bInFreq  = 0;      //关闭进入频率调节提示标净
  94   4                              }
  95   3                              else if(KEY_VLONG == nMask)      //超长按
  96   3                              {
  97   4                                   printf("to Freq \n");
  98   4                                       nState =  FREQ_SET_STATE;    //切换到发射频率设置状态
  99   4                                       bInAlarm = 0;      //关闭进入警示档位调节提示标志位
 100   4                                       bInFreq  = 0;      //关闭进入频率调节提示标净
 101   4                              }
 102   3                      }
 103   2                      break;
 104   2                      case KEY_A_PRES:                  //A键
 105   2                      {
 106   3                              if(KEY_SHORT == nMask)    //短按
 107   3                              {
 108   4                                 printf("power ++\n");
 109   4                                 if(nPowerLevel<32)
 110   4                                 {
 111   5                                    bEnable = 1;
 112   5                                    nPowerLevel++;
 113   5                                    P0 = PowerCodeTb[nPowerLevel-1];
 114   5                                        SaveConfig();
 115   5                                 }
 116   4                              }
 117   3                      }
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 3   

 118   2                      break;
 119   2                      case KEY_B_PRES:                  //B键
 120   2                      {
 121   3                              if(KEY_SHORT == nMask)    //短按
 122   3                              {
 123   4                                printf("power --\n");
 124   4                                if(nPowerLevel>=1)
 125   4                                {
 126   5                                   nPowerLevel--;
 127   5                                       SaveConfig();
 128   5                                       if(nPowerLevel == 0) //0档位就直接关闭
 129   5                                       {
 130   6                                               bEnable = 0;
 131   6                                       }
 132   5                                       else
 133   5                                       {
 134   6                                          P0 = PowerCodeTb[nPowerLevel-1];
 135   6                                       }
 136   5                                }      
 137   4                              }
 138   3                      }
 139   2                      break;
 140   2                      default:
 141   2                      break; 
 142   2              }
 143   1      }
 144          
 145          //处理频率设置模式的事件
 146          void FreqSetHandle()
 147          {
 148   1          unsigned char nKey  = nEvent&0x0f;
 149   1              unsigned char nMask = nEvent&0xf0;
 150   1              switch(nKey)
 151   1              {
 152   2                      case KEY_A_PRES:           //A键
 153   2                      {
 154   3                              if(KEY_SHORT == nMask)    //短按
 155   3                              {
 156   4                                    printf("freq ++\n");
 157   4                                        if(nFreqLevel == 1)
 158   4                                        {
 159   5                                           nFreqLevel = 2;
 160   5                                               SaveConfig();
 161   5                                        }
 162   4                                        else
 163   4                                        {
 164   5                                           nFreqLevel = 1;
 165   5                                               SaveConfig();
 166   5                                        }
 167   4                              }
 168   3                      }
 169   2                      break;
 170   2                      case KEY_B_PRES:           //B键
 171   2                      {
 172   3                              if(KEY_SHORT == nMask)    //短按
 173   3                              {
 174   4                                  printf("to Normal \n");
 175   4                                      nState =  POWER_SET_STATE;   //切换到发射功率设置状态
 176   4                              }
 177   3                      }
 178   2                      break;
 179   2                      default:
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 4   

 180   2                      break; 
 181   2              }
 182   1      }
 183          
 184          //处理警示强度设置模式的事件
 185          void AlarmSetHandle()
 186          {
 187   1          unsigned char nKey  = nEvent&0x0f;
 188   1              unsigned char nMask = nEvent&0xf0;
 189   1              switch(nKey)
 190   1              {
 191   2                      case KEY_A_PRES:                  //A键
 192   2                      {
 193   3                              if(KEY_SHORT == nMask)    //短按
 194   3                              {
 195   4                                       bSendCode = 1;       //发送特征码标志位置位
 196   4                                       printf("Send a Code Signal \n");
 197   4                              }
 198   3                      }
 199   2                      break;
 200   2                      case KEY_B_PRES:                  //B键
 201   2                      {
 202   3                              if(KEY_SHORT == nMask)    //短按
 203   3                              {
 204   4                                      nState =  POWER_SET_STATE;   //切换到发射功率设置状态
 205   4                                      printf("to Normal \n");
 206   4                              }
 207   3                      }
 208   2                      break;
 209   2                      default:
 210   2                      break; 
 211   2              }
 212   1      }
 213          
 214          //用户交互处理任务
 215          void UserTask()
 216          {
 217   1               switch(nState)
 218   1               {
 219   2                      case POWER_SET_STATE:
 220   2                      {
 221   3                              PowerSetHandle();  //处理功率设置模式的事件
 222   3                      }
 223   2                      break;
 224   2                      case FREQ_SET_STATE: 
 225   2                      {
 226   3                              FreqSetHandle();   //处理频率设置模式的事件
 227   3                      }
 228   2                      break;
 229   2                      case ALARM_SET_STATE: 
 230   2                      {
 231   3                              AlarmSetHandle();  //处理警示强度设置模式的事件
 232   3                      }
 233   2                      break;
 234   2                      default:
 235   2                      break;  
 236   2               }
 237   1      }
 238          
 239          //系统任务
 240          void SystemTask()
 241          {
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 5   

 242   1                if(!bSafeProtect)      //看看是否有异常系统事件发生
 243   1                {
 244   2                    nState =  ERROR_STATE;   //切换到Error状态
 245   2                }
 246   1                else
 247   1                {
 248   2                    //如果异常解除了，则恢复到默认的发射功率设置模式
 249   2                    if(nState == ERROR_STATE)
 250   2                        nState =      POWER_SET_STATE;
 251   2                }
 252   1      }
 253          
 254          //状态指示任务
 255          void StatusTask()
 256          {
 257   1               switch(nState)
 258   1               {
 259   2                      case POWER_SET_STATE:
 260   2                      {
 261   3                          StopT3();
*** WARNING C206 IN LINE 261 OF MAIN.C: 'StopT3': missing function-prototype
 262   3                              LED2 = 1;
 263   3                              LED3 = 1;
 264   3                      }
 265   2                      break;
 266   2                      case FREQ_SET_STATE: 
 267   2                      {
 268   3                          StopT3();
 269   3                              LED2 = 1;
 270   3                              LED3 = 0;
 271   3                      }
 272   2                      break;
 273   2                      case ALARM_SET_STATE: 
 274   2                      {
 275   3                          StopT3();
 276   3                              LED2 = 0;
 277   3                              LED3 = 1;
 278   3                      }
 279   2                      break;
 280   2                      case ERROR_STATE:
 281   2                      {
 282   3                          StartT3();
*** WARNING C206 IN LINE 282 OF MAIN.C: 'StartT3': missing function-prototype
 283   3                              LED2 = 0;
 284   3                              LED3 = 0;
 285   3                      }
 286   2                      break;
 287   2                      default:
 288   2                      break;  
 289   2               }
 290   1      }
 291          //数码管显示任务
 292          void DigLEDTask()
 293          {
 294   1               switch(nState)
 295   1               {
 296   2                      case POWER_SET_STATE:
 297   2                      {
 298   3                           nflagLastTime++;
 299   3                               if(bInAlarm)      //如果检测到警示标志
 300   3                               {
 301   4                                       if(nflagLastTime <= 100)         //数码管00和关闭交替出现
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 6   

 302   4                                       {
 303   5                                          WriteLEDData16(0,0);
 304   5                                       }
 305   4                                   else
 306   4                                       {
 307   5                                          WriteLEDData16(17,17);
 308   5                                       }
 309   4                               }
 310   3                               else if(bInFreq)  //如果检测到频率标志
 311   3                               {
 312   4                                   if(nflagLastTime <= 100)     //数码管01和关闭交替出现
 313   4                                       {
 314   5                                          WriteLEDData16(0,1);
 315   5                                       }
 316   4                                   else
 317   4                                       {
 318   5                                          WriteLEDData16(17,17);
 319   5                                       }
 320   4                               }
 321   3                               else
 322   3                               {
 323   4                                    WriteLEDData16(nPowerLevel/10,nPowerLevel%10);
 324   4                               }
 325   3                               
 326   3                               if(nflagLastTime == 200)
 327   3                                   nflagLastTime = 0;          
 328   3                      }
 329   2                      break;
 330   2                      case FREQ_SET_STATE: 
 331   2                      {
 332   3                               WriteLEDData16(0,nFreqLevel);
 333   3                      }
 334   2                      break;
 335   2                      case ALARM_SET_STATE: 
 336   2                      {
 337   3                               WriteLEDData16(16,16);   //数码管显示PP
 338   3                      }
 339   2                      break;
 340   2                      case ERROR_STATE:
 341   2                      {
 342   3                           nErrorLastTime++;
 343   3                               if(nErrorLastTime <= 100)        //异常状态数码管88和关闭交替出现
 344   3                               {
 345   4                                  WriteLEDData16(8,8);
 346   4                               }
 347   3                           else
 348   3                               {
 349   4                                  WriteLEDData16(17,17);
 350   4                               }
 351   3      
 352   3                               if(nErrorLastTime == 200)
 353   3                                   nErrorLastTime = 0; 
 354   3                      }
 355   2                      break;
 356   2                      default:
 357   2                      break;  
 358   2               }
 359   1      }
 360           
 361          void main()
 362          {
 363   1         //系统时钟2分频
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 7   

 364   1         P_SW2 = 0x80;
 365   1         CLKDIV = 0x02;
 366   1         P_SW2 = 0x00;
 367   1      
 368   1         //获取EEPROM配置
 369   1         LoadConfig();
 370   1         //初始化定时器
 371   1         Timer0Init();
*** WARNING C206 IN LINE 371 OF MAIN.C: 'Timer0Init': missing function-prototype
 372   1         Timer1Init();
*** WARNING C206 IN LINE 372 OF MAIN.C: 'Timer1Init': missing function-prototype
 373   1         Timer3Init();
*** WARNING C206 IN LINE 373 OF MAIN.C: 'Timer3Init': missing function-prototype
 374   1         //初始化IO
 375   1         IOInit();
 376   1         //初始化数码管
 377   1         DigLEDInit();
 378   1         //初始化串口1
 379   1         Uart1Init();
*** WARNING C206 IN LINE 379 OF MAIN.C: 'Uart1Init': missing function-prototype
 380   1         //打开总中断
 381   1         EA = 1;
 382   1      
 383   1         while(1)
 384   1         {
 385   2            //处理用户操作事件
 386   2                if(GetUserEvent())  
 387   2                {
 388   3                   printf("get a event \n");
 389   3                       UserTask();
 390   3                       bUserEvent = 0;  //清空事件数据并且复位标志位
 391   3                       nEvent = 0;
 392   3                }
 393   2                //处理系统事件
 394   2                SystemTask();
 395   2                //处部设备显示
 396   2                DigLEDTask();   //数码管显示任务
 397   2                StatusTask();   //显示当前设备状态（LED,Beep等）
 398   2                //printf("nPowerLevel %bd nFreqLevel %bd\n",nPowerLevel,nFreqLevel);
 399   2                //delay_ms(10);
 400   2         }
 401   1      }
 402          
 403          /*******************************************************************************
 404          * 函 数 名         : void Timer0() interrupt 1
 405          * 函数功能                 : 定时器0中断函数
 406          * 输    入         : 无
 407          * 输    出         : 无
 408          *******************************************************************************/
 409          void Timer0() interrupt 1  using 1
 410          {
 411   1              static u16 iCnt =0;         //发射周期指针
 412   1              //static u16 iCntCode  =0;      //发送特征码指针
 413   1              static u8  iSendStep =0;        //发送特征码指针
 414   1              u8 SetTL0 = 0,SetTH0 = 0;
 415   1              u16 PWMOnCnt = 0,PWMOffCnt = 0,CheckSafePos = 0,PWMLength =0;
 416   1              u8  CodeLength = 66;   //特征码的计数  6ms/(181.6us/2)
 417   1              u16 StopLength = 330;  //特征码的计数  30ms/(181.6us/2)
 418   1              //在上一个周期完成之后 根据设置的频率档位调节定时器初值
 419   1              if(nFreqLevelCur != nFreqLevel)
 420   1              {
 421   2                  if(iCnt == 0)
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 8   

 422   2                      {
 423   3                         nFreqLevelCur = nFreqLevel;
 424   3                      }
 425   2              }
 426   1      
 427   1          //选择定时器配置
 428   1              if(!bSetCode)
 429   1              {
 430   2                       if(nFreqLevelCur == 1)
 431   2                      {
 432   3                              //TL0 = 0x6C;           //设置定时初值 106us
 433   3                      //TH0 = 0xFB;           //设置定时初值
 434   3                              //TL0 = 0x8D;           //设置定时初值 106us
 435   3                      //TH0 = 0xFB;           //设置定时初值
 436   3                          TL0 = (65535 - BB_FREQ)%256;                //设置定时初值 106us
 437   3                      TH0 = (65535 - BB_FREQ)/256;            //设置定时初值
 438   3                              PWMOnCnt  = 30;
 439   3                              PWMOffCnt = 314;
 440   3                              CheckSafePos = 200;
 441   3                              PWMLength = 1887;
 442   3                      }
 443   2                      else
 444   2                      {
 445   3                              //TL0 = 0x0A;           //设置定时初值 68.5us
 446   3                      //TH0 = 0xFD;           //设置定时初值
 447   3                  //TL0 = 0x26;               //设置定时初值 68.5us
 448   3                  //TH0 = 0xFD;               //设置定时初值
 449   3                              TL0 = (65535 - CC_FREQ)%256;            //设置定时初值 106us
 450   3                      TH0 = (65535 - CC_FREQ)/256;            //设置定时初值
 451   3                              PWMOnCnt  = 46;
 452   3                              PWMOffCnt = 476;
 453   3                              CheckSafePos = 300;
 454   3                              PWMLength = 2899;
 455   3                      }
 456   2              }
 457   1              else
 458   1              {
 459   2                   //TL0 = 0x12;              //设置定时初值 91us
 460   2                   //TH0 = 0xFC;              //设置定时初值
 461   2                       TL0 = (65535 - ER_FREQ)%256;           //设置定时初值 106us
 462   2                   TH0 = (65535 - ER_FREQ)/256;               //设置定时初值
 463   2              }
 464   1              
 465   1              if(bEnable)   //在使能输出的情况下
 466   1              {
 467   2                      if(nState != ALARM_SET_STATE)    //非通讯模式
 468   2                      {
 469   3                          iCnt++;
 470   3                              if(iCnt == PWMOnCnt)
 471   3                              {
 472   4                                      bSigSwitch = 0;
 473   4                              }
 474   3                              if(iCnt == PWMOffCnt)
 475   3                              {
 476   4                                      iCnt = 0;
 477   4                                      bSigSwitch = 1;
 478   4                              }
 479   3                              //安全保护功能
 480   3                              if(iCnt == CheckSafePos)
 481   3                              {
 482   4                                       if(ProtectA == 0)
 483   4                                       {
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 9   

 484   5                                          bSafeProtect = 0;
 485   5                                       }      
 486   4                                       else
 487   4                                       {
 488   5                                          bSafeProtect = 1;
 489   5                                       }          
 490   4                              }       
 491   3                      }
 492   2                      else
 493   2                      {
 494   3                           //判断是否有发送特征码的请求        
 495   3                           if(bSendCode)
 496   3                               {
 497   4                                      //分步输出脉冲
 498   4                                      switch(iSendStep)
 499   4                                      {
 500   5                                          case 0:     //第一步，先打开与门
 501   5                                              {
 502   6                                                      bSigSwitch = 1;
 503   6                                                      iSendStep  = 1;   //跳转输出警示信号
 504   6                                              }
 505   5                                          case 1: //第二步，输出200ms的警示信号
 506   5                                              {
 507   6                                                      /*if(iCnt == PWMOnCnt)
 508   6                                                      {
 509   6                                                              bSigSwitch = 0;
 510   6                                                      }
 511   6                                                      if(iCnt == PWMOffCnt)
 512   6                                                      {
 513   6                                                              iCnt = 0;
 514   6                                                              bSigSwitch = 1;
 515   6                                                      }*/
 516   6                                                      if(iCnt == PWMLength)
 517   6                                                      {
 518   7                                                          //printf("iCntCode %d PWMLength %d \n",iCntCode,PWMLength);
 519   7                                                              iCnt = 0;
 520   7                                                              //iCntCode = 0;
 521   7                                                              bSigSwitch = 0;   //打开开关 准备输出6ms特征码
 522   7                                                              iSendStep  = 2;   //跳转到下一步发送特征码
 523   7                                                              bSetCode   = 1;   //使能特征码周期配置标志位
 524   7                                                      }
 525   6                                              }
 526   5                                              break;
 527   5                                              case 2: //第三步，开始输出30ms的停止信号
 528   5                                              {
 529   6                                                  bSigSwitch = 0;          //打开开关 准备输出6ms特征码
 530   6                                                      iSendStep  = 3;      //跳转输出警示信号
 531   6                                                      iCnt = 0;            //重新开始计数
 532   6                                              }
 533   5                                              break;
 534   5                                          case 3:     //第四步，停止输出30ms的停止信号
 535   5                                              {
 536   6                                                      if(iCnt == StopLength)
 537   6                                                      {
 538   7                                                          //结束发送
 539   7                                                              iSendStep  = 4;
 540   7                                                      }
 541   6                                              }
 542   5                                              break;
 543   5                                              case 4: //第四步，开始输出6ms的特征码
 544   5                                              {
 545   6                                                  bSigSwitch = 1;          //打开开关 准备输出6ms特征码
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 10  

 546   6                                                      iSendStep  = 5;      //跳转输出警示信号
 547   6                                                      iCnt = 0;            //重新开始计数
 548   6                                              }
 549   5                                              break;
 550   5                                          case 5:     //第五步，停止输出6ms的特征码
 551   5                                              {
 552   6                                                      if(iCnt == CodeLength)
 553   6                                                      {
 554   7                                                          //结束发送
 555   7                                                              iCnt = 0;
 556   7                                                              //iCntCode = 0;
 557   7                                                              bSigSwitch = 0;
 558   7                                                              bSendCode  = 0;  //清除发送特征码请求
 559   7                                                              iSendStep  = 0;
 560   7                                                              bSetCode   = 0;  //关闭特征码周期配置标志位 
 561   7                                                      }
 562   6                                              }
 563   5                                              break;
 564   5                                      }
 565   4                                      iCnt++;
 566   4                                  //iCntCode++;
 567   4                               }
 568   3                               else
 569   3                               {
 570   4                                  //没有发送请求，关闭发射 ,标志位清0
 571   4                                  bSigSwitch = 0;
 572   4                                      iCnt = 0;
 573   4                                      //iCntCode = 0;
 574   4                                      iSendStep = 0;
 575   4                               }   
 576   3                      }
 577   2              }       
 578   1              else
 579   1              {
 580   2                  bSigSwitch = 0;  //未使能，关闭输出
 581   2                      iCnt = 0;
 582   2              }
 583   1      }
 584          
 585          
 586          /*******************************************************************************
 587          * 函 数 名         : void Timer1() interrupt 3
 588          * 函数功能                 : 定时器1中断函数
 589          * 输    入         : 无
 590          * 输    出         : 无
 591          *******************************************************************************/
 592          void Timer1() interrupt 3  using 1
 593          {
 594   1              //static u16 j =0;
 595   1              u8      nUserEventTmp = 0;              
 596   1              //j++;
 597   1      
 598   1              //printf("Timer1 is running\n");
 599   1              //按键扫描
 600   1              nUserEventTmp = Key_Scan();
 601   1              if((nUserEventTmp != 0)&&(!bUserEvent))
 602   1              {
 603   2                 //printf("send a event \n");
 604   2                 nEvent = nUserEventTmp;      //传递数据并且置位标志位
 605   2                 bUserEvent = 1;  
 606   2              }
 607   1      
C51 COMPILER V9.01   MAIN                                                                  12/09/2018 10:48:22 PAGE 11  

 608   1              //Protect1 = ~Protect1;  //保护监测引脚A
 609   1              //Protect2 = ~Protect2;  //保护监测引脚B
 610   1              //Protect3 = ~Protect3;  //保护监测引脚C
 611   1      }
 612          
 613          void Timer3() interrupt 19  using 1
 614          {
 615   1              Beep   = ~Beep;
 616   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1039    ----
   CONSTANT SIZE    =    129    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      7    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
